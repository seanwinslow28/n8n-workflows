#!/usr/bin/env python3
"""
Quick validation script to check if the test was successful
"""

import webbrowser
import time

def check_test_results():
    """Help user validate the test results step by step."""
    
    print("üîç AI CHAT EVALUATION - RESULTS VALIDATION")
    print("=" * 50)
    
    # Step 1: Check n8n executions
    print("\n1Ô∏è‚É£ STEP 1: Check n8n Execution Status")
    print("   Opening n8n executions page...")
    
    try:
        webbrowser.open("http://localhost:5678/executions")
        time.sleep(2)
    except:
        print("   ‚ùå Could not open browser automatically")
        print("   üîó Go to: http://localhost:5678/executions")
    
    print("\n   ‚úÖ Look for recent execution of 'AI Chat Evaluation'")
    print("   ‚úÖ All nodes should be green (successful)")
    print("   ‚ùå If any node is red, click it to see error details")
    
    input("\n   Press Enter when you've checked the execution status...")
    
    # Step 2: Check Notion database
    print("\n2Ô∏è‚É£ STEP 2: Check Notion Database")
    print("   Opening Notion database...")
    
    try:
        webbrowser.open("https://www.notion.so/2250a4634b4e81d5bce7ea9d29bd2089")
        time.sleep(2)
    except:
        print("   ‚ùå Could not open browser automatically")
        print("   üîó Go to: https://www.notion.so/2250a4634b4e81d5bce7ea9d29bd2089")
    
    print("\n   ‚úÖ Look for new entry with Session ID: test_session_001")
    print("   ‚úÖ Verify all 23 properties are filled:")
    print("      ‚Ä¢ Numbers (1-10): Helpfulness, Accuracy, Clarity, etc.")
    print("      ‚Ä¢ Text fields: Key Insights, Improvement Suggestions")
    print("      ‚Ä¢ Metadata: Message Count (6), Duration (2 min)")
    print("      ‚Ä¢ Classifications: Model (GPT-4), Use Case (Code Review)")
    
    input("\n   Press Enter when you've checked the Notion database...")
    
    # Step 3: Validate results
    print("\n3Ô∏è‚É£ STEP 3: Results Validation")
    print("   Expected AI evaluation scores (1-10 scale):")
    print("   ‚Ä¢ Helpfulness: 8-10 (excellent debugging help)")
    print("   ‚Ä¢ Accuracy: 9-10 (correct Python syntax fixes)")
    print("   ‚Ä¢ Clarity: 8-10 (clear code explanations)")
    print("   ‚Ä¢ Relevance: 9-10 (directly answered questions)")
    print("   ‚Ä¢ Tone: 8-10 (professional and helpful)")
    print("   ‚Ä¢ Completeness: 8-10 (thorough responses)")
    print("   ‚Ä¢ Overall Score: 8+ average")
    
    # Get user feedback
    print("\n4Ô∏è‚É£ STEP 4: Test Status")
    
    execution_ok = input("   ‚úÖ Was the n8n execution successful? (y/n): ").lower().strip()
    notion_ok = input("   ‚úÖ Were all 23 properties created in Notion? (y/n): ").lower().strip()
    scores_ok = input("   ‚úÖ Do the AI evaluation scores look reasonable? (y/n): ").lower().strip()
    
    print("\n" + "="*50)
    
    if execution_ok == 'y' and notion_ok == 'y' and scores_ok == 'y':
        print("üéâ SUCCESS! All 23 properties are working correctly!")
        print("‚úÖ Your AI Chat Evaluation workflow is fully operational")
        print("\nüöÄ READY FOR PRODUCTION:")
        print("   ‚Ä¢ All scoring metrics working")
        print("   ‚Ä¢ All metadata captured")
        print("   ‚Ä¢ All classifications populated")
        print("   ‚Ä¢ Notion integration complete")
        
    else:
        print("‚ö†Ô∏è  ISSUES DETECTED - Let's troubleshoot:")
        
        if execution_ok != 'y':
            print("   üîß n8n execution failed:")
            print("      ‚Ä¢ Check credentials (OpenAI API, Notion API)")
            print("      ‚Ä¢ Verify workflow is active")
            print("      ‚Ä¢ Check node configurations")
        
        if notion_ok != 'y':
            print("   üîß Notion properties missing:")
            print("      ‚Ä¢ Verify database URL is correct")
            print("      ‚Ä¢ Check Notion API permissions")
            print("      ‚Ä¢ Validate property names match database")
        
        if scores_ok != 'y':
            print("   üîß AI evaluation scores issue:")
            print("      ‚Ä¢ Check OpenAI API key")
            print("      ‚Ä¢ Verify prompt is working")
            print("      ‚Ä¢ Review structured output parser")
    
    print("\nüìã NEXT STEPS:")
    print("   ‚Ä¢ Test with your own conversation data")
    print("   ‚Ä¢ Adjust scoring criteria if needed")
    print("   ‚Ä¢ Set up production webhook endpoint")
    print("   ‚Ä¢ Monitor evaluation quality over time")


if __name__ == "__main__":
    check_test_results() 